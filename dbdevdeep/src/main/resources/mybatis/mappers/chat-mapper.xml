<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dbdevdeep.chat.mybatis.mapper.ChatMapper">
	
	<!-- 사용자가 참여중인 채팅방 목록을 조회 -->
	<select id="findAllByfromIdAndtoId" 
	    parameterType="String" 
	    resultType="com.dbdevdeep.chat.dto.CustomChatRoomDto">
	    SELECT 
	        cr.room_no, cmi.room_name, cr.last_chat, cr.last_time
	    FROM 
	        (
	            SELECT 
	                cmsh.room_no, cmsh.member_id, cmsh.change_time, cmsh.member_status
	            FROM 
	                chat_member_status_history cmsh
	            JOIN 
	                (
	                    SELECT 
	                        room_no, 
	                        MAX(change_time) AS max_change_time
	                    FROM 
	                        chat_member_status_history
	                    WHERE 
	                        member_id = #{emp_id}
	                        AND member_status IN (1, 3)
	                    GROUP BY 
	                        room_no
	                ) latest ON cmsh.room_no = latest.room_no 
	                AND cmsh.change_time = latest.max_change_time
	            WHERE 
	                cmsh.member_id = #{emp_id}
	        ) latest
	    JOIN 
	        chat_member_info cmi ON latest.room_no = cmi.room_no AND latest.member_id = cmi.member_id
	    JOIN 
	        chat_room cr ON latest.room_no = cr.room_no
	    ORDER BY 
	        cr.last_time DESC;  <!-- last_time을 기준으로 최신순 정렬 -->
	</select>
	<!-- 사용자가 참여하고 있는 채팅방의 다른 참여자의 정보를 조회 -->
	<!-- 
	    1. room_no = #{room_no}인 사용자 조회
	    2. 중복 member_id가 있을 경우 change_time DESC하여 가장 첫번째 결과만 조회
	    3. 중복 제거된 결과의 member_status가 1, 3인 결과만 조회
	    4. member_id가 #{emp_id}이 아닌 결과만 조회
	-->
	<select id="otherMemberIds" parameterType="map" resultType="String">
	    WITH latest_status AS (
	        SELECT 
	            cmsh.member_id, 
	            cmsh.member_status, 
	            ROW_NUMBER() OVER(PARTITION BY cmsh.member_id ORDER BY cmsh.change_time DESC) AS rn
	        FROM 
	            chat_member_status_history cmsh
	        WHERE 
	            cmsh.room_no = #{room_no}
	    )
	    , filtered_status AS (
	        SELECT *
	        FROM latest_status
	        WHERE rn = 1
	          AND member_status IN (1, 3)
	          AND member_id != #{emp_id}
	    )
	    SELECT 
	        fs.member_id
	    FROM filtered_status fs;
	</select>
	
	<!-- 일대일 채팅방 존재 여부 탐색 -->
	<select id="selectPrivateChatRoom" 
		parameterType="String" 
		resultType="int">
	    SELECT 
	        IFNULL(
	            (SELECT room_no
	             FROM (
	                 SELECT room_no, member_id, member_status
	                 FROM chat_member_status_history AS h
	                 WHERE (room_no, member_id, change_time) IN (
	                     SELECT room_no, member_id, MAX(change_time)
	                     FROM chat_member_status_history
	                     GROUP BY room_no, member_id
	                 )
	             ) AS latest_status
	             WHERE member_status IN (1, 3)
	               AND room_no IN (
	                   SELECT room_no
	                   FROM chat_member_status_history
	                   WHERE member_id IN (#{admin_id}, #{emp_id})
	                   GROUP BY room_no
	                   HAVING COUNT(DISTINCT member_id) = 2
	               )
	             GROUP BY room_no
	             HAVING COUNT(member_id) = 2
	            ), 0) AS room_no;
	</select>
	
	<!-- 단체 채팅방 존재 여부 탐색 -->
	<!-- 
	1. admin_id가 참여중인 상태 (chat_status = 1, 3)인 채팅방 조회
	2. 해당 채팅방 리스트에서 총 인원이 empCount인 채팅방 조회
	3. 해당 멤버가 admin_id와 emp_id_list에 포함된 멤버와 정확히 일치하는지 확인
	4. 모든 조건이 일치하면 해당 방의 ID를 반환 
	-->
	<select id="selectGroupChatRoom" parameterType="map" resultType="int">
		SELECT IFNULL(
		    (SELECT cr.room_no
		    FROM chat_room cr
		    WHERE cr.room_no IN (
		        SELECT subquery.room_no
		        FROM (
		            SELECT 
		                room_no, 
		                member_status,
		                ROW_NUMBER() OVER (PARTITION BY room_no ORDER BY change_time DESC) as rn
		            FROM chat_member_status_history
		            WHERE member_id = #{admin_id}
		        ) subquery
		        WHERE rn = 1
		        AND member_status IN (1, 3)
		    )
		    AND cr.room_no IN (
		        SELECT room_no
		        FROM chat_member_info
		        GROUP BY room_no
		        HAVING COUNT(*) = #{empCount}
		        AND COUNT(DISTINCT CASE 
		                            WHEN member_id IN (
		                                #{admin_id},
		                                <foreach collection="emp_id_list" item="empId" separator=",">
		                                    #{empId}
		                                </foreach>
		                            ) THEN member_id 
		                            ELSE NULL 
		                          END
		                 ) = #{empCount}
		    )
		    ), 0) AS room_no;
	</select>
	
	<!-- 일대일 채팅방 생성 -->
	<insert id="createPrivateChatRoom" useGeneratedKeys="true" keyProperty="room_no">
	    INSERT INTO chat_room (last_chat)
	    VALUES (#{last_chat})
	</insert>
	
	<!-- 일대일 채팅방 참여 정보 생성 -->
	<insert id="createChatMemberInfo" parameterType="com.dbdevdeep.chat.vo.ChatMemberInfoVo">
	    INSERT INTO chat_member_info (member_id, room_no, room_name, is_admin)
	    VALUES (#{member_id}, #{room_no}, #{room_name}, #{is_admin})
	</insert>
	
	<!-- 일대일 채팅 참여자 상태이력 생성 -->
	<insert id="createChatMemberStatusHistory" parameterType="com.dbdevdeep.chat.vo.ChatMemberStatusHistoryVo">
	    INSERT INTO chat_member_status_history (room_no, member_id, member_status, changed_by_id)
	    VALUES (#{room_no}, #{member_id}, #{member_status}, #{changed_by_id})
	</insert>
	
	<!-- 채팅방 이름 조회 -->
	<select id="selectChatRoomName" parameterType="com.dbdevdeep.chat.vo.ChatMemberInfoVo" resultType="string">
		SELECT room_name
		FROM chat_member_info
		WHERE member_id = #{member_id}
		AND room_no = #{room_no}
	</select>
	
	<!-- 메세지 리스트 조회 -->
	<select id="selectChatMsgList" parameterType="map" resultType="com.dbdevdeep.chat.vo.ChatMsgVo">
	    SELECT *
	    FROM chat_msg
	    WHERE room_no = #{room_no}
	    AND reg_time >= (
	        SELECT MIN(change_time)
	        FROM chat_member_status_history
	        WHERE room_no = #{room_no}
	        AND member_id = #{emp_id}
	    )
	    ORDER BY reg_time ASC
	</select>
	
	<!-- 상태이력 리스트 조회 -->
	<select id="selectHistoryList" parameterType="map" resultType="com.dbdevdeep.chat.vo.ChatMemberStatusHistoryVo">
	    SELECT *
	    FROM chat_member_status_history
	    WHERE room_no = #{room_no}
	    AND history_no >= (
	        SELECT MIN(history_no)
	        FROM chat_member_status_history
	        WHERE room_no = #{room_no}
	        AND member_id = #{emp_id}
	    )
	    ORDER BY change_time ASC;
	</select>
	
	<!-- 채팅 메세지 생성 -->
	<insert id="createChatMsg" parameterType="com.dbdevdeep.chat.vo.ChatMsgVo" useGeneratedKeys="true" keyProperty="msg_no">
	    INSERT INTO chat_msg (room_no, writer_id, chat_content)
	    VALUES (#{room_no}, #{writer_id}, #{chat_content})
	</insert>
	
	<!-- 채팅 이미지 생성 -->
	<insert id="createChatPic" parameterType="com.dbdevdeep.chat.vo.ChatMsgVo" useGeneratedKeys="true" keyProperty="msg_no">
	    INSERT INTO chat_msg (room_no, writer_id, chat_content, ori_pic_name, new_pic_name)
	    VALUES (#{room_no}, #{writer_id}, #{chat_content}, #{ori_pic_name}, #{new_pic_name})
	</insert>
	
	<!-- 채팅 메세지 조회 -->
	<select id="selectChatMsgVo" parameterType="int" resultType="com.dbdevdeep.chat.vo.ChatMsgVo">
		SELECT *
		FROM chat_msg
		WHERE msg_no = #{msg_no}
	</select>
	
	<!-- 채팅방 정보 변경(last_chat, last_time) -->
	<update id="updateChatRoom" parameterType="com.dbdevdeep.chat.vo.ChatMsgVo">
		UPDATE chat_room
	    SET last_chat = #{chat_content}, last_time = #{reg_time}
	    WHERE room_no = #{room_no} 
	</update>
	
	<!-- 메인페이지 헤더에 표시될 채팅 읽음 확인 개수 조회 -->
	<select id="countChatReadCheckByEmpId" parameterType="string" resultType="int">
		WITH RecentChatRooms AS (
		    SELECT 
		        cr.room_no
		    FROM chat_room cr
		    WHERE cr.room_no IN (
		        SELECT subquery.room_no
		        FROM (
		            SELECT 
		                room_no, 
		                member_status,
		                ROW_NUMBER() OVER (PARTITION BY room_no ORDER BY change_time DESC) as rn
		            FROM chat_member_status_history
		            WHERE member_id = #{emp_id}  -- 사용자 ID
		        ) subquery
		        WHERE rn = 1
		        AND member_status IN (1, 3)   -- 참여 중인 상태 (1, 3)
		    )
		    AND cr.room_no IN (
		        SELECT room_no
		        FROM chat_member_info
		        WHERE member_id = #{emp_id}  -- 사용자가 참여 중인 방만 포함
		    )
		), ChatMessages AS (
		    SELECT 
		        msg_no, room_no, chat_content, reg_time
		    FROM chat_msg
		    WHERE room_no IN (SELECT room_no FROM RecentChatRooms)
		)
		SELECT COUNT(cm.msg_no) AS unread_message_count
		FROM chat_msg cm
		LEFT JOIN chat_read_check crc
		ON cm.msg_no = crc.msg_no
		WHERE crc.read_id IS NULL
		AND cm.room_no IN (SELECT room_no FROM RecentChatRooms);
	</select>
	
	<!-- 참여중인 채팅방 리스트에 표시될 채팅 읽음 확인 조회 -->
	<select id="countChatReadCheckByEmpIdAndRoomNo" parameterType="map" resultType="int">
		SELECT COUNT(cm.msg_no) AS unread_message_count
		FROM chat_msg cm
		LEFT JOIN chat_read_check crc
		ON cm.msg_no = crc.msg_no 
	    	AND crc.read_id = #{emp_id}
		WHERE cm.room_no = #{room_no}
			AND crc.read_id IS NULL;
	</select>
	
	<!-- 참여중인 채팅방에서 사용자가 읽지 않은 메세지 조회 -->
	<select id="selectUnreadCheck" parameterType="map" resultType="com.dbdevdeep.chat.vo.ChatMsgVo">
		SELECT cm.msg_no
        FROM chat_msg cm
        LEFT JOIN chat_read_check crc
        ON cm.msg_no = crc.msg_no 
        	AND crc.read_id = #{emp_id}
        WHERE cm.room_no = #{room_no}
        	AND crc.read_id IS NULL;
	</select>
	
	<!-- 읽음처리 -->
	<insert id="createChatReadCheck" parameterType="map">
		INSERT INTO chat_read_check (msg_no, read_id)
		VALUES (#{msg_no}, #{read_id})
	</insert>
	
	<!-- 메세지의 읽음확인 개수 출력 -->
	<select id="countChatReadCheckByMsgNo" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM chat_read_check
        WHERE msg_no = #{msg_no}
	</select>
	
	<!-- 채팅방에 참여중인 전체 인원수(정원) 구하기 -->
	<select id="headCountByRoomNo" parameterType="int" resultType="int">
		SELECT COUNT(*)
		FROM (
		   SELECT 
		       room_no,
		       member_status,
		       ROW_NUMBER() OVER (PARTITION BY member_id ORDER BY change_time DESC) as rn
		   FROM chat_member_status_history
		   WHERE room_no = #{room_no} 
		) subquery
		WHERE rn = 1
		AND member_status IN (1, 3) 
	</select>
</mapper>


		
		